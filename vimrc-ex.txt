"VIMRC"
set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
set termencoding=utf-8
set encoding=utf-8
autocmd BufWritePost $MYVIMRC source $MYVIMRC
set nu
set tabstop=4
syntax on
set shiftwidth=4
set cin
set mouse=a
set ruler
set cursorline
set cursorcolumn
set cindent
set autoindent
set relativenumber
let g:rainbow_active=1
set backspace=2
set foldmethod=indent
set foldlevelstart=99
set cindent
let mapleader="\<space>"
"read !pbpaste
"write !pbcopy

inoremap ' ''<ESC>i
inoremap " ""<ESC>i
inoremap ( ()<ESC>i
inoremap [ []<ESC>i
inoremap { {<CR>}<ESC>O
inoremap } {}<ESC>i
" inoremap = <Space>=<Space><ESC>a
" inoremap : :<Space><ESC>a
" inoremap + <Space>+<Space><ESC>a
" inoremap - <Space>-<Space><ESC>a
" inoremap * <Space>*<Space><ESC>a
" inoremap / <Space>/<Space><ESC>a
" inoremap % <Space>%<Space><ESC>a

:command! -nargs=1 Rename let tpname = expand('%:t') | saveas <args> | edit <args> | call delete(expand(tpname))
nmap <Leader>f :NERDTreeFocus<cr>R<c-w><c-p> " 刷新NERDTree文档列表

func DeleteSpace()
	let i = 4
	while getline('.')[col('.') - i] == ' ' 
		let i += 1
	endwhile
	if getline('.')[col('.') - 3] == '-' && getline('.')[col('.') - i] == '='
		return "\<ESC>xhhxla"
	else 
		if getline('.')[col('.') - i] == '+' || getline('.')[col('.') - i] == '-' || getline('.')[col('.') - i] == '*' || getline('.')[col('.') - i] == '/' || getline('.')[col('.') - i] == '=' || getline('.')[col('.') - i] == '>' || getline('.')[col('.') - i] == '<' || getline('.')[col('.') - i] == '%'|| getline('.')[col('.') - i] == '!'|| getline('.')[col('.') - i] == '^'|| getline('.')[col('.') - i] == '|'|| getline('.')[col('.') - i] == '&'
			return "\<ESC>bbheldwhela"
		else
			return ""
		endif
	endif
endfunc

function ArrowBracket()
	while 1
		let pre = col('$')
		execute 's/\(<[^<]*\)\(\s\)\([^>]*>\)/\1\3/e'
		let now = col('$')
		if pre == now
			break
		endif
	endwhile
endfunction

nnoremap <silent> <leader>r :call ArrowBracket()<CR>A

if &filetype  == 'cpp'
	inoremap ! <Space>!<Space><c-r>=DeleteSpace()<CR>
	inoremap & <Space>&<Space><c-r>=DeleteSpace()<CR>
	inoremap ^ <Space>^<Space><c-r>=DeleteSpace()<CR>
	inoremap \| <Space>\|<Space><c-r>=DeleteSpace()<CR>
	inoremap + <Space>+<Space><c-r>=DeleteSpace()<CR>
	inoremap - <Space>-<Space><c-r>=DeleteSpace()<CR>
	inoremap * <Space>*<Space><c-r>=DeleteSpace()<CR>
	inoremap / <Space>/<Space><c-r>=DeleteSpace()<CR>
	inoremap = <Space>=<Space><c-r>=DeleteSpace()<CR>
	inoremap < <Space><<Space><c-r>=DeleteSpace()<CR>
	inoremap > <Space>><Space><c-r>=DeleteSpace()<CR>
	inoremap % <Space>%<Space><c-r>=DeleteSpace()<CR>
	inoremap , ,<Space><ESC>a
	inoremap ; ;<Space><ESC>a
endif

if &filetype  == 'python'
	inoremap ! <Space>!<Space><c-r>=DeleteSpace()<CR>
	inoremap + <Space>+<Space><c-r>=DeleteSpace()<CR>
	inoremap - <Space>-<Space><c-r>=DeleteSpace()<CR>
	inoremap * <Space>*<Space><c-r>=DeleteSpace()<CR>
	inoremap / <Space>/<Space><c-r>=DeleteSpace()<CR>
	inoremap = <Space>=<Space><c-r>=DeleteSpace()<CR>
	inoremap < <Space><<Space><c-r>=DeleteSpace()<CR>
	inoremap > <Space>><Space><c-r>=DeleteSpace()<CR>
	inoremap % <Space>%<Space><c-r>=DeleteSpace()<CR>
	inoremap , ,<Space><ESC>a
	inoremap ; ;<Space><ESC>a
endif

if &filetype  == 'rust'
	inoremap ! <Space>!<Space><c-r>=DeleteSpace()<CR>
	inoremap + <Space>+<Space><c-r>=DeleteSpace()<CR>
	inoremap & <Space>&<Space><c-r>=DeleteSpace()<CR>
	inoremap - <Space>-<Space><c-r>=DeleteSpace()<CR>
	inoremap \| <Space>\|<Space><c-r>=DeleteSpace()<CR>
	inoremap * <Space>*<Space><c-r>=DeleteSpace()<CR>
	inoremap / <Space>/<Space><c-r>=DeleteSpace()<CR>
	inoremap = <Space>=<Space><c-r>=DeleteSpace()<CR>
	inoremap < <Space><<Space><c-r>=DeleteSpace()<CR>
	inoremap > <Space>><Space><c-r>=DeleteSpace()<CR>
	inoremap % <Space>%<Space><c-r>=DeleteSpace()<CR>
	inoremap , ,<Space><ESC>a
	inoremap ; ;<Space><ESC>a
endif



"设置跳出自动补全的括号
func SkipPair()
    if getline('.')[col('.') - 1] == ')' || getline('.')[col('.') - 1] == ']' || getline('.')[col('.') - 1] == '"' || getline('.')[col('.') - 1] == "'" || getline('.')[col('.') - 1] == '}'|| getline('.')[col('.') - 1] == '='|| getline('.')[col('.') - 1] == ';' || getline('.')[col('.') - 1] == ')'|| getline('.')[col('.') - 1] == '>'

        return "\<ESC>la"
    else
        return "\t"
    endif
endfunc
" 将tab键绑定为跳出括号
inoremap <TAB> <c-r>=SkipPair()<CR>

func DeleteBoth()
	if (getline('.')[col('.') - 2] == '(' && getline('.')[col('.') - 1] == ')')||(getline('.')[col('.') - 2] == '[' && getline('.')[col('.') - 1] == ']') || (getline('.')[col('.') - 2] == '"' && getline('.')[col('.') - 1] == '"') ||(getline('.')[col('.') - 2] == "'" && getline('.')[col('.') - 1] == "'") || (getline('.')[col('.') - 2] == '{' && getline('.')[col('.') - 1] == '}') || (getline('.')[col('.') - 2] == '<' && getline('.')[col('.') - 1] == '>') 

		return "\<ESC>2s" 
	else
		return "\<BS>"
	endif
endfunc
inoremap <BS> <c-r>=DeleteBoth()<CR>

call plug#begin('~/.vim/plugged')
Plug 'kaicataldo/material.vim'
Plug 'rakr/vim-one'

Plug 'PhilRunninger/nerdtree-buffer-ops'
Plug 'preservim/nerdtree'

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'connorholyday/vim-snazzy'
Plug 'Valloric/YouCompleteMe'

Plug 'suan/vim-instant-markdown'
Plug 'plasticboy/vim-markdown'
Plug 'yantze/instant-markdown-d'
Plug 'tpope/vim-commentary'
Plug 'luochen1990/rainbow'

Plug 'ErichDonGubler/vim-sublime-monokai'
Plug 'sickill/vim-monokai'

Plug 'neomake/neomake'
Plug 'tpope/vim-surround'

Plug 'lervag/vimtex'
Plug 'mg984/vim-visual-multi'

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug '~/.fzf'

Plug 'rust-lang/rust.vim'
Plug 'racer-rust/vim-racer'
call plug#end()

execute pathogen#infect()
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_wq = 0


" " This is the default extra key bindings
" let g:fzf_action = {
"   \ 'ctrl-t': 'tab split',
"   \ 'ctrl-x': 'split',
"   \ 'ctrl-v': 'vsplit' }

" " Default fzf layout
" " - down / up / left / right
" let g:fzf_layout = { 'down': '~40%' }

" " space space to open fzf file finder
nnoremap <silent> <leader><space> :FZF<CR>

" Enable hidden buffers (don't need to save when switching files)
set hidden

let g:rustfmt_autosave = 1
syntax enable
filetype plugin indent on

let g:racer_cmd = "/Users/reberhardt/.cargo/bin/racer"
let g:racer_experimental_completer = 1
augroup Racer
    autocmd!
    autocmd FileType rust nmap <buffer> gd         <Plug>(rust-def)
    autocmd FileType rust nmap <buffer> gs         <Plug>(rust-def-split)
    autocmd FileType rust nmap <buffer> gx         <Plug>(rust-def-vertical)
    autocmd FileType rust nmap <buffer> gt         <Plug>(rust-def-tab)
    autocmd FileType rust nmap <buffer> <leader>gd <Plug>(rust-doc)
augroup END

" cnoreabbrev ag Ack

let g:instant_markdown_autostart = 0
map <F8> :InstantMarkdownPreview<CR>

nnoremap <F2> :NERDTree<CR>

"把":g/^\s*\$/d"这个命令换成":DBL"这个容易被(Delete Blank Lines)
"记住的命令,这个命令的作用是删除文档中所有空白行
":command -nargs=0 DBL g/^\s*$/d
:command -range=% DBL :<line1>,<line2>g/^\s*$/d

"以下命令将文中所有的字符串idiots替换成managers：
":1,$s/idiots/manages/g
"通常我们会在命令中使用%指代整个文件做为替换范围：
":%s/search/replace/g
"以下命令指定只在第5至第15行间进行替换:
":5,15s/dog/cat/g
"以下命令指定只在当前行至文件结尾间进行替换:
":.,$s/dog/cat/g
"以下命令指定只在后续9行内进行替换:
":.,.+8s/dog/cat/g


let g:airline#extensions#tabline#enabled = 1
"set airline 
let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
let g:airline#extensions#tabline#show_tab_nr = 1
let g:airline#extensions#tabline#formatter = 'default'
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#tabline#fnametruncate = 20
let g:airline#extensions#tabline#fnamecollapse = 2
let g:airline#extensions#tabline#buffer_idx_mode = 1

nmap <leader>1 <Plug>AirlineSelectTab1
nmap <leader>2 <Plug>AirlineSelectTab2
nmap <leader>3 <Plug>AirlineSelectTab3
nmap <leader>4 <Plug>AirlineSelectTab4
nmap <leader>5 <Plug>AirlineSelectTab5
nmap <leader>6 <Plug>AirlineSelectTab6
nmap <leader>7 <Plug>AirlineSelectTab7
nmap <leader>8 <Plug>AirlineSelectTab8
nmap <leader>9 <Plug>AirlineSelectTab9


let g:ycm_confirm_extra_conf = 0
"let g:ycm_global_ycm_extra_conf = '~/.vim/.ycm_extra_conf.py'
let g:ycm_global_ycm_extra_conf = '/Users/davidxu/.vim/plugged/YouCompleteMe/third_party/ycmd/.ycm_extra_conf.py' 
let g:syntastic_java_checkers = []
let g:EclimFileTypeValidate = 0
let g:ycm_seed_identifiers_with_syntax=1
let g:ycm_semantic_triggers =  {
  \   'c' : ['->', '.','re![_a-zA-z0-9]'],
  \   'objc' : ['->', '.', 're!\[[_a-zA-Z]+\w*\s', 're!^\s*[^\W\d]\w*\s',
  \             're!\[.*\]\s'],
  \   'ocaml' : ['.', '#'],
  \   'cpp,objcpp' : ['->', '.', '::','re![_a-zA-Z0-9]'],
  \   'perl' : ['->'],
  \   'php' : ['->', '::'],
  \   'cs,java,javascript,typescript,d,python,perl6,scala,vb,elixir,go' : ['.'],
  \   'ruby' : ['.', '::'],
  \   'lua' : ['.', ':'],
  \   'erlang' : [':'],
  \   'rs' : ['.', '::'],
  \ }
let g:ycm_filetype_blacklist = {
      \ 'python': 1,
      \ 'python3': 1,
	  \ 'java': 1,
	  \ 'go': 1,
      \}

let g:ycm_rust_src_path = '/usr/local/Cellar/rust/1.52.1/lib/rustlib/src'

set pumheight=10
set completeopt-=preview
nnoremap <leader>y :let g:ycm_auto_trigger=0<CR>                " turn off YCM
nnoremap <leader>Y :let g:ycm_auto_trigger=1<CR>                "turn on YCM

highlight PMenu ctermfg=0 ctermbg=242 guifg=black guibg=darkgrey
highlight PMenuSel ctermfg=242 ctermbg=8 guifg=darkgrey guibg=black
let g:ycm_show_diagnostics_ui = 0
let g:ycm_key_list_select_completion = ['<Enter>', '<Down>']
let g:ycm_key_list_stop_completion = ['<C-y>']
nnoremap <c-k> :YcmCompleter GoToDeclaration<CR>|
nnoremap <c-h> :YcmCompleter GoToDefinition<CR>|
nnoremap <c-j> :YcmCompleter GoToDefinitionElseDeclaration<CR>|

map <F5> :call CompileRunGcc()<CR>
func! CompileRunGcc()
	exec "w"
	if &filetype == 'c'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'cpp'
		exec "!g++ % -o %<"
		exec "!time ./%<"
	elseif &filetype == 'java' 
		exec "!javac %" 
		exec "!time java %<"
	elseif &filetype == 'sh'
		:!time bash %
	elseif &filetype == 'python'
		exec "!time python3 %"
    elseif &filetype == 'html'
        exec "!firefox % &"
    elseif &filetype == 'go'
        exec "!go build %<"
        exec "!time go run %"
    elseif &filetype == 'mkd'
        exec "!~/.vim/markdown.pl % > %.html &"
        exec "!firefox %.html &"
	endif
endfunc

 let g:rainbow_active = 1 "0 if you want to enable it later via :RainbowToggle
	let g:rainbow_conf = {
	\	'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick'],
	\	'ctermfgs': ['lightblue', 'lightyellow', 'lightcyan', 'lightmagenta'],
	\	'operators': '_,_',
	\	'parentheses': ['start=/(/ end=/)/ fold', 'start=/\[/ end=/\]/ fold', 'start=/{/ end=/}/ fold'],
	\	'separately': {
	\		'*': {},
	\		'tex': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/'],
	\		},
	\		'lisp': {
	\			'guifgs': ['royalblue3', 'darkorange3', 'seagreen3', 'firebrick', 'darkorchid3'],
	\		},
	\		'vim': {
	\			'parentheses': ['start=/(/ end=/)/', 'start=/\[/ end=/\]/', 'start=/{/ end=/}/ fold', 'start=/(/ end=/)/ containedin=vimFuncBody', 'start=/\[/ end=/\]/ containedin=vimFuncBody', 'start=/{/ end=/}/ fold containedin=vimFuncBody'],
	\		},
	\		'html': {
	\			'parentheses': ['start=/\v\<((area|base|br|col|embed|hr|img|input|keygen|link|menuitem|meta|param|source|track|wbr)[ >])@!\z([-_:a-zA-Z0-9]+)(\s+[-_:a-zA-Z0-9]+(\=("[^"]*"|'."'".'[^'."'".']*'."'".'|[^ '."'".'"><=`]*))?)*\>/ end=#</\z1># fold'],
	\		},
	\		'css': 0,
	\	}
	\}

" colorscheme one
" set background=dark " for the dark version
" set background=light " for the light version

" colorscheme material

" colorscheme monokai

colorscheme sublimemonokai
set termguicolors

" set statusline=%<%f\ %h%m%r%{kite#statusline()}%=%-14.(%l,%c%V%)\ %P
" set laststatus=2  " always display the status line

" Python, JavaScript, Go
let g:kite_supported_languages = ['python', 'javascript', 'go', 'java']

" All the languages Kite supports
" let g:kite_supported_languages = ['*']

" Turn off Kite
" let g:kite_supported_languages = []
set completeopt+=menuone
set completeopt+=noselect

call neomake#configure#automake('nrwi', 500)


let g:tex_flavor='latex'
let g:vimtex_view_method='zathura'
let g:vimtex_quickfix_mode=0
set conceallevel=1
let g:tex_conceal='abdmg'



" Default highlighting (see help :highlight and help :highlighlink)
" highlight multiple_cursors_cursor term=reverse cterm=reverse gui=reverse
" highlight link multiple_cursors_visual Visual

